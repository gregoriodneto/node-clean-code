-- Criando tabela de Produtos
CREATE TABLE produtos (
	id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
	nome VARCHAR2(100),
	preco NUMBER(10,2)
);

-- Criando procedure de inserir produto
CREATE OR REPLACE PROCEDURE inserir_produto(
	p_nome VARCHAR2,
	p_preco NUMBER
) IS
BEGIN
	INSERT INTO produtos (nome, preco)
	VALUES (p_nome, p_preco);
END;

-- Criar a função de buscar preco
CREATE OR REPLACE FUNCTION buscar_preco(
	p_id IN NUMBER
) RETURN NUMBER IS
	v_preco NUMBER;
BEGIN
	SELECT preco INTO v_preco
	FROM produtos
	WHERE id = p_id;

	RETURN v_preco;
	
EXCEPTION
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('Produto não encontrado');
		RETURN -1;
END;

-- Testando o script criado
DECLARE
	v_preco NUMBER;
BEGIN
	inserir_produto('Teclado Mecânico', 350.00);
	inserir_produto('Mouse Gamer', 180.00);

	-- Buscando preço por ID existente
	v_preco := buscar_preco(1);
	DBMS_OUTPUT.PUT_LINE('Preço do produto 1: R$ ' || v_preco);
	
	-- Buscando preço por ID inexistente
	v_preco := buscar_preco(999); -- Deve retornar -1 e mostrar erro
	DBMS_OUTPUT.PUT_LINE('Preço do produto 999: R$ ' || v_preco);
END;

-- Atualizando produtos por ID
CREATE OR REPLACE PROCEDURE atualizar_preco(
	p_id IN NUMBER,
	new_preco IN NUMBER
) IS
	p_preco NUMBER;
BEGIN
	
	IF new_preco <= 0 THEN
		RAISE_APPLICATION_ERROR(-20001, 'O novo preço deve ser maior que zero.');
	END IF;
	
	SELECT preco INTO p_preco
	FROM produtos
	WHERE id = p_id;

	UPDATE produtos
	SET preco = new_preco
	WHERE id = p_id;
	
	DBMS_OUTPUT.PUT_LINE('Preço do produto atualizado com sucesso, Preço anterior R$ ' || p_preco || ' Preço atualizado R$ ' || new_preco);
	
EXCEPTION 
	WHEN NO_DATA_FOUND THEN
		DBMS_OUTPUT.PUT_LINE('Produto não encontrado.');

	WHEN OTHERS THEN
		DBMS_OUTPUT.PUT_LINE('Erro inesperado: ' || SQLERRM);
END;

SHOW ERRORS PROCEDURE atualizar_preco;

BEGIN
	atualizar_preco(1, 200.0);		-- Válido
	atualizar_preco(999, 200.0); 	-- Produto não existe
	atualizar_preco(2, -10); 		-- Inválido: preço negativo
END;
